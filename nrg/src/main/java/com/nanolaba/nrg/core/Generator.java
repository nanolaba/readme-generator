package com.nanolaba.nrg.core;

import com.nanolaba.nrg.NRG;
import com.nanolaba.nrg.widgets.NRGWidget;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Generator {

    private final GeneratorConfig config;
    private Map<String, GenerationResult> results;

    public Generator(File sourceFile, Charset charset) throws IOException {
        this(sourceFile, charset, null);
    }

    public Generator(File sourceFile, Charset charset, List<NRGWidget> widgets) throws IOException {
        this(sourceFile, FileUtils.readFileToString(sourceFile, charset), widgets);
    }

    public Generator(File sourceFile, String sourceBody) {
        this(sourceFile, sourceBody, null);
    }

    public Generator(File sourceFile, String sourceBody, List<NRGWidget> widgets) {
        config = new GeneratorConfig(sourceFile, sourceBody, widgets);
    }

    protected void generateContents() {
        for (String language : config.getLanguages()) {
            results.put(language, generateContent(language));
        }
    }

    protected void generateContentIfNecessary() {
        if (results == null) {
            results = new HashMap<>();
            generateContents();
        }
    }

    private GenerationResult generateContent(String language) {
        GenerationResult result = new GenerationResult(language);
        result.getContent().append(generateHeadComment(language));

        config.getSourceLinesStream()
                .filter(t -> t.isLineVisible(language))
                .map(t -> t.generateLine(language))
                .forEachOrdered(line -> result.getContent().append(line).append(System.lineSeparator()));

        return result;
    }

    protected String generateHeadComment(String language) {
        return "<!-- This file was automatically generated by Nanolaba Readme Generator (NRG) " + NRG.getVersion() + " -->" + System.lineSeparator() +
                "<!-- Visit https://github.com/nanolaba/readme-generator for details -->" + System.lineSeparator();
    }

    public GenerationResult getResult(String language) {
        generateContentIfNecessary();
        return results.get(language);
    }

    public Collection<GenerationResult> getResults() {
        generateContentIfNecessary();
        return results.values();
    }

    public GeneratorConfig getConfig() {
        return config;
    }
}
