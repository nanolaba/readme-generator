package com.nanolaba.nrg.widgets;

import com.nanolaba.nrg.DefaultNRGTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

class TableOfContentsWidgetSlugifyTest extends DefaultNRGTest {

    private TableOfContentsWidget.Config config;
    private List<TableOfContentsWidget.Header> headers;

    @BeforeEach
    void setUp() {
        config = new TableOfContentsWidget.Config();
        headers = new ArrayList<>();
    }

    @Test
    @DisplayName("–ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    void testSimpleTitle() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# Simple Title", config, headers);
        assertEquals("simple-title", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º")
    void testBoldText() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("## My **Bold** Title", config, headers);
        assertEquals("my-bold-title", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—É—Ä—Å–∏–≤–æ–º")
    void testItalicText() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("### Title with *italic* text", config, headers);
        assertEquals("title-with-italic-text", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–¥–æ–º")
    void testCodeText() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("#### Using `code` in title", config, headers);
        assertEquals("using-code-in-title", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å—Å—ã–ª–∫–æ–π")
    void testLinkInTitle() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# Check [Documentation](https://example.com)", config, headers);
        assertEquals("check-documentation", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å HTML —Ç–µ–≥–∞–º–∏")
    void testHtmlTags() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("## Title with <strong>HTML</strong>", config, headers);
        assertEquals("title-with-html", header.getAnchor());
    }

    @ParameterizedTest
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏")
    @CsvSource({
            "'# FAQ: How to use this?', 'faq-how-to-use-this'",
            "'## Step 1: Install & Configure', 'step-1-install-configure'",
            "'### Version 2.0 - What\\'s New!', 'version-20-whats-new'",
            "'#### Section A.1.2 (Important)', 'section-a12-important'",
            "'# Title with \"quotes\" and \\'apostrophes\\'', 'title-with-quotes-and-apostrophes'"
    })
    void testPunctuationMarks(String input, String expected) {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header(input, config, headers);
        assertEquals(expected, header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏")
    void testMultipleSpaces() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# Multiple    Spaces   Here", config, headers);
        assertEquals("multiple-spaces-here", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å URL")
    void testUrlInTitle() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("## Visit https://example.com for details", config, headers);
        assertEquals("visit-for-details", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º")
    void testStrikethroughText() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# Old ~~deprecated~~ method", config, headers);
        assertEquals("old-deprecated-method", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏")
    void testUnderscores() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("## Method_name_with_underscores", config, headers);
        assertEquals("method-name-with-underscores", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    void testSpecialCharactersOnly() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# !!!@@@###", config, headers);
        assertEquals("", header.getAnchor());
    }

    @Test
    @DisplayName("–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
    void testEmptyTitle() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("#   ", config, headers);
        assertEquals("", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ—Ñ–∏—Å–∞–º–∏")
    void testDashesInTitle() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# Pre-formatted--title---here", config, headers);
        assertEquals("pre-formatted-title-here", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ü–∏—Ñ—Ä–∞–º–∏")
    void testNumbersInTitle() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("## Chapter 123 Section 4.5.6", config, headers);
        assertEquals("chapter-123-section-456", header.getAnchor());
    }

    @Test
    @DisplayName("–°–ª–æ–∂–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
    void testComplexTitle() {
        String complexTitle = "### **Step 2**: Configure [API Keys](https://docs.example.com) & `Environment` Variables!";
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header(complexTitle, config, headers);
        assertEquals("step-2-configure-api-keys-environment-variables", header.getAnchor());
    }


    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è –¥–µ—Ñ–∏—Å–∞–º–∏")
    void testLeadingTrailingDashes() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# -start and end-", config, headers);
        assertEquals("start-and-end", header.getAnchor());
    }
    // TableOfContentsWidgetSlugifyTest.java

    @Test
    @DisplayName("–†—É—Å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
    void testRussianTitle() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º", config, headers);
        assertEquals("–∑–∞–≥–æ–ª–æ–≤–æ–∫-–Ω–∞-—Ä—É—Å—Å–∫–æ–º", header.getAnchor());
    }

    @Test
    @DisplayName("–ö–∏—Ç–∞–π—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
    void testChineseTitle() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# ‰∏≠ÊñáÊ†áÈ¢ò", config, headers);
        assertEquals("‰∏≠ÊñáÊ†áÈ¢ò", header.getAnchor());
    }

    @Test
    @DisplayName("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏")
    void testUnicodeCharacters() {
        TableOfContentsWidget.Header header = new TableOfContentsWidget.Header("# T√≠tulo con acent√≥s and √©mojis üéâ", config, headers);
        assertEquals("t√≠tulo-con-acent√≥s-and-√©mojis", header.getAnchor());
    }
}